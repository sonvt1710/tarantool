buffer = require 'buffer'
---
...
msgpack = require 'msgpack'
---
...
ffi = require 'ffi'
---
...
-- Arguments check.
buf = buffer.ibuf()
---
...
msgpack.encode()
---
- error: 'msgpack.encode: a Lua object expected'
...
msgpack.encode('test', 'str')
---
- error: 'msgpack.encode: argument 2 must be of type ''struct ibuf'''
...
msgpack.encode('test', buf.buf)
---
- error: 'msgpack.encode: argument 2 must be of type ''struct ibuf'''
...
msgpack.decode()
---
- error: 'msgpack.decode: a Lua string or ''char *'' expected'
...
msgpack.decode(123)
---
- error: 'msgpack.decode: a Lua string or ''char *'' expected'
...
msgpack.decode(buf)
---
- error: 'msgpack.decode: a Lua string or ''char *'' expected'
...
msgpack.decode(buf.buf, 'size')
---
- error: 'bad argument #2 to ''?'' (number expected, got string)'
...
msgpack.decode('test', 0)
---
- error: 'msgpack.decode: offset is out of bounds'
...
msgpack.decode('test', 5)
---
- error: 'msgpack.decode: offset is out of bounds'
...
msgpack.decode('test', 'offset')
---
- error: 'bad argument #2 to ''?'' (number expected, got string)'
...
msgpack.decode_unchecked()
---
- error: 'msgpack.decode: a Lua string or ''char *'' expected'
...
msgpack.decode_unchecked(123)
---
- error: 'msgpack.decode: a Lua string or ''char *'' expected'
...
msgpack.decode_unchecked(buf)
---
- error: 'msgpack.decode: a Lua string or ''char *'' expected'
...
msgpack.decode_unchecked('test', 0)
---
- error: 'msgpack.decode: offset is out of bounds'
...
msgpack.decode_unchecked('test', 5)
---
- error: 'msgpack.decode: offset is out of bounds'
...
msgpack.decode_unchecked('test', 'offset')
---
- error: 'bad argument #2 to ''?'' (number expected, got string)'
...
-- Encode/decode a string.
s = msgpack.encode({1, 2, 3}) .. msgpack.encode({4, 5, 6})
---
...
obj, offset = msgpack.decode(s)
---
...
obj
---
- [1, 2, 3]
...
obj, offset = msgpack.decode(s, offset)
---
...
obj
---
- [4, 5, 6]
...
offset == #s + 1
---
- true
...
obj, offset = msgpack.decode_unchecked(s)
---
...
obj
---
- [1, 2, 3]
...
obj, offset = msgpack.decode_unchecked(s, offset)
---
...
obj
---
- [4, 5, 6]
...
offset == #s + 1
---
- true
...
-- Encode/decode a buffer.
buf = buffer.ibuf()
---
...
len = msgpack.encode({1, 2, 3}, buf)
---
...
len = msgpack.encode({4, 5, 6}, buf) + len
---
...
buf:size() == len
---
- true
...
orig_rpos = buf.rpos
---
...
obj, rpos = msgpack.decode(buf.rpos, buf:size())
---
...
obj
---
- [1, 2, 3]
...
buf.rpos = rpos
---
...
obj, rpos = msgpack.decode(buf.rpos, buf:size())
---
...
obj
---
- [4, 5, 6]
...
buf.rpos = rpos
---
...
buf:size() == 0
---
- true
...
buf.rpos = orig_rpos
---
...
obj, rpos = msgpack.decode_unchecked(buf.rpos, buf:size())
---
...
obj
---
- [1, 2, 3]
...
buf.rpos = rpos
---
...
obj, rpos = msgpack.decode_unchecked(buf.rpos, buf:size())
---
...
obj
---
- [4, 5, 6]
...
buf.rpos = rpos
---
...
buf:size() == 0
---
- true
...
-- Invalid msgpack.
s = msgpack.encode({1, 2, 3})
---
...
s = s:sub(1, -2)
---
...
msgpack.decode(s)
---
- error: 'msgpack.decode: invalid MsgPack'
...
buf = buffer.ibuf()
---
...
msgpack.encode({1, 2, 3}, buf)
---
- 4
...
msgpack.decode(buf.rpos, buf:size() - 1)
---
- error: 'msgpack.decode: invalid MsgPack'
...
-- Provide a buffer. Try both 'struct ibuf' and 'struct ibuf *'.
buf = buffer.IBUF_SHARED
---
...
buf:reset()
---
...
size = msgpack.encode({a = 1, b = 2}, buf)
---
...
(msgpack.decode(buf.rpos, size))
---
- {'a': 1, 'b': 2}
...
buf = buffer.ibuf()
---
...
size = msgpack.encode({c = 3, d = 4}, buf)
---
...
(msgpack.decode(buf.rpos, size))
---
- {'c': 3, 'd': 4}
...
-- Decode should accept both 'char *' and 'const char *'.
buf:reset()
---
...
size = msgpack.encode(100, buf)
---
...
(msgpack.decode(ffi.cast('char *', buf.rpos), size))
---
- 100
...
(msgpack.decode(ffi.cast('const char *', buf.rpos), size))
---
- 100
...
--
-- gh-4224: msgpack.decode(cdata, size) should check, that size
-- is not negative.
--
msgpack.decode(ffi.cast('char *', '\x04\x05\x06'), -1)
---
- error: 'msgpack.decode: size can''t be negative'
...
--
-- gh-4333: msgpack encode/decode decimals.
--
decimal = require('decimal')
---
...
a = decimal.new('1e37')
---
...
b = decimal.new('1e-38')
---
...
c = decimal.new('1')
---
...
d = decimal.new('0.1234567')
---
...
e = decimal.new('123.4567')
---
...
msgpack.decode(msgpack.encode(a)) == a
---
- true
...
msgpack.decode(msgpack.encode(b)) == b
---
- true
...
msgpack.decode(msgpack.encode(c)) == c
---
- true
...
msgpack.decode(msgpack.encode(d)) == d
---
- true
...
msgpack.decode(msgpack.encode(e)) == e
---
- true
...
--
-- gh-4268: msgpack encode/decode UUID
--
uuid = require('uuid')
---
...
fail = nil
---
...
for i = 1,10 do\
    local a = uuid.new()\
    if msgpack.decode(msgpack.encode(a)) ~= a then\
        fail = a\
    end\
end
---
...
fail
---
- null
...
