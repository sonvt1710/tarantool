env = require('test_run')
---
...
test_run = env.new()
---
...
-- gh-3018: typeless columns are prohibited.
--
box.execute("CREATE TABLE t1 (id PRIMARY KEY);")
---
- null
- 'At line 1 at or near position 21: keyword ''PRIMARY'' is reserved. Please use double
  quotes if ''PRIMARY'' is an identifier.'
...
box.execute("CREATE TABLE t1 (a, id INT PRIMARY KEY);")
---
- null
- Syntax error at line 1 near ','
...
box.execute("CREATE TABLE t1 (id PRIMARY KEY, a INT);")
---
- null
- 'At line 1 at or near position 21: keyword ''PRIMARY'' is reserved. Please use double
  quotes if ''PRIMARY'' is an identifier.'
...
box.execute("CREATE TABLE t1 (id INT PRIMARY KEY, a);")
---
- null
- Syntax error at line 1 near ')'
...
box.execute("CREATE TABLE t1 (id INT PRIMARY KEY, a INT, b UNIQUE);")
---
- null
- 'At line 1 at or near position 47: keyword ''UNIQUE'' is reserved. Please use double
  quotes if ''UNIQUE'' is an identifier.'
...
-- gh-3104: real type is stored in space format.
--
box.execute("CREATE TABLE t1 (id TEXT PRIMARY KEY, a NUMBER, b INT, c TEXT, d SCALAR);")
---
- row_count: 1
...
box.space.T1:format()
---
- [{'type': 'string', 'nullable_action': 'abort', 'name': 'ID', 'is_nullable': false},
  {'type': 'number', 'nullable_action': 'none', 'name': 'A', 'is_nullable': true},
  {'type': 'integer', 'nullable_action': 'none', 'name': 'B', 'is_nullable': true},
  {'type': 'string', 'nullable_action': 'none', 'name': 'C', 'is_nullable': true},
  {'type': 'scalar', 'nullable_action': 'none', 'name': 'D', 'is_nullable': true}]
...
box.execute("CREATE VIEW v1 AS SELECT b + a, b - a FROM t1;")
---
- row_count: 1
...
box.space.V1:format()
---
- [{'type': 'number', 'nullable_action': 'none', 'name': 'b + a', 'is_nullable': true},
  {'type': 'number', 'nullable_action': 'none', 'name': 'b - a', 'is_nullable': true}]
...
-- gh-2494: index's part also features correct declared type.
--
box.execute("CREATE INDEX i1 ON t1 (a);")
---
- row_count: 1
...
box.execute("CREATE INDEX i2 ON t1 (b);")
---
- row_count: 1
...
box.execute("CREATE INDEX i3 ON t1 (c);")
---
- row_count: 1
...
box.execute("CREATE INDEX i4 ON t1 (id, c, b, a, d);")
---
- row_count: 1
...
box.space.T1.index.I1.parts
---
- - type: number
    is_nullable: true
    fieldno: 2
...
box.space.T1.index.I2.parts
---
- - type: integer
    is_nullable: true
    fieldno: 3
...
box.space.T1.index.I3.parts
---
- - type: string
    is_nullable: true
    fieldno: 4
...
box.space.T1.index.I4.parts
---
- - type: string
    is_nullable: false
    fieldno: 1
  - type: string
    is_nullable: true
    fieldno: 4
  - type: integer
    is_nullable: true
    fieldno: 3
  - type: number
    is_nullable: true
    fieldno: 2
  - type: scalar
    is_nullable: true
    fieldno: 5
...
box.execute("DROP VIEW v1;")
---
- row_count: 1
...
box.execute("DROP TABLE t1;")
---
- row_count: 1
...
-- gh-3906: data of type BOOL is displayed as should
-- during SQL SELECT.
--
format = {{ name = 'ID', type = 'unsigned' }, { name = 'A', type = 'boolean' }}
---
...
sp = box.schema.space.create("TEST", { format = format } )
---
...
i = sp:create_index('primary', {parts = {1, 'unsigned' }})
---
...
sp:insert({1, true})
---
- [1, true]
...
sp:insert({2, false})
---
- [2, false]
...
box.execute("SELECT * FROM test")
---
- metadata:
  - name: ID
    type: unsigned
  - name: A
    type: boolean
  rows:
  - [1, true]
  - [2, false]
...
sp:drop()
---
...
-- gh-3544: concatenation operator accepts only TEXT and BLOB.
--
box.execute("SELECT 'abc' || 1;")
---
- null
- 'Inconsistent types: expected text or varbinary got unsigned'
...
box.execute("SELECT 'abc' || 1.123;")
---
- null
- 'Inconsistent types: expected text or varbinary got real'
...
box.execute("SELECT 1 || 'abc';")
---
- null
- 'Inconsistent types: expected text or varbinary got unsigned'
...
box.execute("SELECT 1.123 || 'abc';")
---
- null
- 'Inconsistent types: expected text or varbinary got real'
...
box.execute("SELECt 'a' || 'b' || 1;")
---
- null
- 'Inconsistent types: expected text or varbinary got unsigned'
...
-- What is more, they must be of the same type.
--
box.execute("SELECT 'abc' || randomblob(5);")
---
- null
- 'Inconsistent types: expected text got varbinary'
...
box.execute("SELECT randomblob(5) || 'x';")
---
- null
- 'Inconsistent types: expected varbinary got text'
...
-- Result of BLOBs concatenation must be BLOB.
--
box.execute("VALUES (TYPEOF(randomblob(5) || zeroblob(5)));")
---
- metadata:
  - name: column1
    type: string
  rows:
  - ['varbinary']
...
-- gh-3954: LIKE accepts only arguments of type TEXT and NULLs.
--
box.execute("CREATE TABLE t1 (s SCALAR PRIMARY KEY);")
---
- row_count: 1
...
box.execute("INSERT INTO t1 VALUES (randomblob(5));")
---
- row_count: 1
...
box.execute("SELECT * FROM t1 WHERE s LIKE 'blob';")
---
- null
- 'Inconsistent types: expected text got varbinary'
...
box.execute("SELECT * FROM t1 WHERE 'blob' LIKE s;")
---
- null
- 'Inconsistent types: expected text got varbinary'
...
box.execute("SELECT * FROM t1 WHERE 'blob' LIKE x'0000';")
---
- null
- 'Inconsistent types: expected text got varbinary'
...
box.execute("SELECT s LIKE NULL FROM t1;")
---
- metadata:
  - name: s LIKE NULL
    type: integer
  rows:
  - [null]
...
box.execute("DELETE FROM t1;")
---
- row_count: 1
...
box.execute("INSERT INTO t1 VALUES (1);")
---
- row_count: 1
...
box.execute("SELECT * FROM t1 WHERE s LIKE 'int';")
---
- null
- 'Inconsistent types: expected text got unsigned'
...
box.execute("SELECT * FROM t1 WHERE 'int' LIKE 4;")
---
- null
- 'Inconsistent types: expected text got unsigned'
...
box.execute("SELECT NULL LIKE s FROM t1;")
---
- metadata:
  - name: NULL LIKE s
    type: integer
  rows:
  - [null]
...
box.space.T1:drop()
---
...
-- gh-4229: allow explicit cast from string to integer for string
-- values containing quoted floating point literals.
--
box.execute("SELECT CAST('1.123' AS INTEGER);")
---
- null
- 'Type mismatch: can not convert 1.123 to integer'
...
box.execute("CREATE TABLE t1 (f TEXT PRIMARY KEY);")
---
- row_count: 1
...
box.execute("INSERT INTO t1 VALUES('0.0'), ('1.5'), ('3.9312453');")
---
- row_count: 3
...
box.execute("SELECT CAST(f AS INTEGER) FROM t1;")
---
- null
- 'Type mismatch: can not convert 0.0 to integer'
...
box.space.T1:drop()
---
...
--
-- gh-4103: If resulting value of arithmetic operations is
-- integers, then make sure its type also integer (not number).
--
box.execute('SELECT 1 + 1;')
---
- metadata:
  - name: 1 + 1
    type: integer
  rows:
  - [2]
...
box.execute('SELECT 1 + 1.1;')
---
- metadata:
  - name: 1 + 1.1
    type: double
  rows:
  - [2.1]
...
box.execute('SELECT \'9223372036854\' + 1;')
---
- metadata:
  - name: '''9223372036854'' + 1'
    type: integer
  rows:
  - [9223372036855]
...
-- Fix BOOLEAN bindings.
box.execute('SELECT ?', {true})
---
- metadata:
  - name: '?'
    type: boolean
  rows:
  - [true]
...
-- gh-4187: make sure that value passsed to the iterator has
-- the same type as indexed fields.
--
box.execute("CREATE TABLE tboolean (s1 BOOLEAN PRIMARY KEY);")
---
- row_count: 1
...
box.execute("INSERT INTO tboolean VALUES (TRUE);")
---
- row_count: 1
...
box.execute("SELECT * FROM tboolean WHERE s1 = x'44';")
---
- null
- 'Type mismatch: can not convert varbinary to boolean'
...
box.execute("SELECT * FROM tboolean WHERE s1 = 'abc';")
---
- null
- 'Type mismatch: can not convert abc to boolean'
...
box.execute("SELECT * FROM tboolean WHERE s1 = 1;")
---
- null
- 'Type mismatch: can not convert unsigned to boolean'
...
box.execute("SELECT * FROM tboolean WHERE s1 = 1.123;")
---
- null
- 'Type mismatch: can not convert real to boolean'
...
box.space.TBOOLEAN:drop()
---
...
box.execute("CREATE TABLE t1(id INT PRIMARY KEY, a INT UNIQUE);")
---
- row_count: 1
...
box.execute("INSERT INTO t1 VALUES (1, 1);")
---
- row_count: 1
...
box.execute("SELECT a FROM t1 WHERE a IN (1.1, 2.1);")
---
- metadata:
  - name: A
    type: integer
  rows: []
...
box.execute("SELECT a FROM t1 WHERE a = 1.1;")
---
- metadata:
  - name: A
    type: integer
  rows: []
...
box.execute("SELECT a FROM t1 WHERE a = 1.0;")
---
- metadata:
  - name: A
    type: integer
  rows:
  - [1]
...
box.execute("SELECT a FROM t1 WHERE a > 1.1;")
---
- metadata:
  - name: A
    type: integer
  rows: []
...
box.execute("SELECT a FROM t1 WHERE a < 1.1;")
---
- metadata:
  - name: A
    type: integer
  rows:
  - [1]
...
box.space.T1:drop()
---
...
box.execute("CREATE TABLE t1(id INT PRIMARY KEY, a INT, b INT);")
---
- row_count: 1
...
box.execute("CREATE INDEX i1 ON t1(a, b);")
---
- row_count: 1
...
box.execute("INSERT INTO t1 VALUES (1, 1, 1);")
---
- row_count: 1
...
box.execute("SELECT a FROM t1 WHERE a = 1.0 AND b > 0.5;")
---
- metadata:
  - name: A
    type: integer
  rows:
  - [1]
...
box.execute("SELECT a FROM t1 WHERE a = 1.5 AND b IS NULL;")
---
- metadata:
  - name: A
    type: integer
  rows: []
...
box.execute("SELECT a FROM t1 WHERE a IS NULL AND b IS NULL;")
---
- metadata:
  - name: A
    type: integer
  rows: []
...
box.space.T1:drop()
---
...
format = {}
---
...
format[1] = { name = 'ID', type = 'unsigned' }
---
...
format[2] = { name = 'A', type = 'unsigned' }
---
...
s = box.schema.create_space('T1', { format = format })
---
...
_ = s:create_index('pk')
---
...
_ = s:create_index('sk', { parts = { 'A' } })
---
...
s:insert({ 1, 1 })
---
- [1, 1]
...
box.execute("SELECT a FROM t1 WHERE a IN (1.1, 2.1);")
---
- metadata:
  - name: A
    type: unsigned
  rows: []
...
s:drop()
---
...
-- gh-3810: range of integer is extended up to 2^64 - 1.
--
box.execute("SELECT 18446744073709551615 > 18446744073709551614;")
---
- metadata:
  - name: 18446744073709551615 > 18446744073709551614
    type: boolean
  rows:
  - [true]
...
box.execute("SELECT 18446744073709551615 > -9223372036854775808;")
---
- metadata:
  - name: 18446744073709551615 > -9223372036854775808
    type: boolean
  rows:
  - [true]
...
box.execute("SELECT -1 < 18446744073709551615;")
---
- metadata:
  - name: -1 < 18446744073709551615
    type: boolean
  rows:
  - [true]
...
box.execute("SELECT 1.5 < 18446744073709551615")
---
- metadata:
  - name: 1.5 < 18446744073709551615
    type: boolean
  rows:
  - [true]
...
box.execute("SELECT 1.5 > 18446744073709551615")
---
- metadata:
  - name: 1.5 > 18446744073709551615
    type: boolean
  rows:
  - [false]
...
box.execute("SELECT 18446744073709551615 > 1.5")
---
- metadata:
  - name: 18446744073709551615 > 1.5
    type: boolean
  rows:
  - [true]
...
box.execute("SELECT 18446744073709551615 < 1.5")
---
- metadata:
  - name: 18446744073709551615 < 1.5
    type: boolean
  rows:
  - [false]
...
box.execute("SELECT 18446744073709551615 = 18446744073709551615;")
---
- metadata:
  - name: 18446744073709551615 = 18446744073709551615
    type: boolean
  rows:
  - [true]
...
box.execute("SELECT 18446744073709551615 > -9223372036854775808;")
---
- metadata:
  - name: 18446744073709551615 > -9223372036854775808
    type: boolean
  rows:
  - [true]
...
box.execute("SELECT 18446744073709551615 < -9223372036854775808;")
---
- metadata:
  - name: 18446744073709551615 < -9223372036854775808
    type: boolean
  rows:
  - [false]
...
box.execute("SELECT -1 < 18446744073709551615;")
---
- metadata:
  - name: -1 < 18446744073709551615
    type: boolean
  rows:
  - [true]
...
box.execute("SELECT -1 > 18446744073709551615;")
---
- metadata:
  - name: -1 > 18446744073709551615
    type: boolean
  rows:
  - [false]
...
box.execute("SELECT 18446744073709551610 - 18446744073709551615;")
---
- metadata:
  - name: 18446744073709551610 - 18446744073709551615
    type: integer
  rows:
  - [-5]
...
box.execute("SELECT 18446744073709551615 = null;")
---
- metadata:
  - name: 18446744073709551615 = null
    type: boolean
  rows:
  - [null]
...
box.execute("SELECT 18446744073709551615 = 18446744073709551615.0;")
---
- metadata:
  - name: 18446744073709551615 = 18446744073709551615.0
    type: boolean
  rows:
  - [false]
...
box.execute("SELECT 18446744073709551615.0 > 18446744073709551615")
---
- metadata:
  - name: 18446744073709551615.0 > 18446744073709551615
    type: boolean
  rows:
  - [true]
...
box.execute("SELECT 18446744073709551615 IN ('18446744073709551615', 18446744073709551615.0)")
---
- metadata:
  - name: 18446744073709551615 IN ('18446744073709551615', 18446744073709551615.0)
    type: boolean
  rows:
  - [true]
...
box.execute("SELECT 1 LIMIT 18446744073709551615;")
---
- metadata:
  - name: '1'
    type: integer
  rows:
  - [1]
...
box.execute("SELECT 1 LIMIT 1 OFFSET 18446744073709551614;")
---
- metadata:
  - name: '1'
    type: integer
  rows: []
...
box.execute("SELECT CAST('18446744073' || '709551616' AS INTEGER);")
---
- null
- 'Type mismatch: can not convert 18446744073709551616 to integer'
...
box.execute("SELECT CAST('18446744073' || '709551615' AS INTEGER);")
---
- metadata:
  - name: CAST('18446744073' || '709551615' AS INTEGER)
    type: integer
  rows:
  - [18446744073709551615]
...
box.execute("SELECT 18446744073709551610 + 5;")
---
- metadata:
  - name: 18446744073709551610 + 5
    type: integer
  rows:
  - [18446744073709551615]
...
box.execute("SELECT 18446744073709551615 * 1;")
---
- metadata:
  - name: 18446744073709551615 * 1
    type: integer
  rows:
  - [18446744073709551615]
...
box.execute("SELECT 1 / 18446744073709551615;")
---
- metadata:
  - name: 1 / 18446744073709551615
    type: integer
  rows:
  - [0]
...
box.execute("SELECT 18446744073709551615 / 18446744073709551615;")
---
- metadata:
  - name: 18446744073709551615 / 18446744073709551615
    type: integer
  rows:
  - [1]
...
box.execute("SELECT 18446744073709551615 / -9223372036854775808;")
---
- metadata:
  - name: 18446744073709551615 / -9223372036854775808
    type: integer
  rows:
  - [-1]
...
box.execute("SELECT 0 - 18446744073709551610;")
---
- null
- 'Failed to execute SQL statement: integer is overflowed'
...
box.execute("CREATE TABLE t (id INT PRIMARY KEY, i INT);")
---
- row_count: 1
...
box.execute("INSERT INTO t VALUES (1, 18446744073709551615);")
---
- row_count: 1
...
box.execute("INSERT INTO t VALUES (2, 18446744073709551614);")
---
- row_count: 1
...
box.execute("INSERT INTO t VALUES (3, 18446744073709551613)")
---
- row_count: 1
...
box.execute("SELECT i FROM t;")
---
- metadata:
  - name: I
    type: integer
  rows:
  - [18446744073709551615]
  - [18446744073709551614]
  - [18446744073709551613]
...
box.execute("SELECT i FROM t WHERE i = 18446744073709551615;")
---
- metadata:
  - name: I
    type: integer
  rows:
  - [18446744073709551615]
...
box.execute("SELECT i FROM t WHERE i BETWEEN 18446744073709551613 AND 18446744073709551615;")
---
- metadata:
  - name: I
    type: integer
  rows:
  - [18446744073709551615]
  - [18446744073709551614]
  - [18446744073709551613]
...
box.execute("SELECT i FROM t ORDER BY i;")
---
- metadata:
  - name: I
    type: integer
  rows:
  - [18446744073709551613]
  - [18446744073709551614]
  - [18446744073709551615]
...
box.execute("SELECT i FROM t ORDER BY -i;")
---
- null
- 'Failed to execute SQL statement: integer is overflowed'
...
box.execute("SELECT i FROM t ORDER BY i LIMIT 1;")
---
- metadata:
  - name: I
    type: integer
  rows:
  - [18446744073709551613]
...
-- Test that built-in functions are capable of handling unsigneds.
--
box.execute("DELETE FROM t WHERE i > 18446744073709551613;")
---
- row_count: 2
...
box.execute("INSERT INTO t VALUES (1, 1);")
---
- row_count: 1
...
box.execute("INSERT INTO t VALUES (2, -1);")
---
- row_count: 1
...
box.execute("SELECT sum(i) FROM t;")
---
- metadata:
  - name: sum(i)
    type: number
  rows:
  - [18446744073709551613]
...
box.execute("SELECT avg(i) FROM t;")
---
- metadata:
  - name: avg(i)
    type: number
  rows:
  - [6148914691236516864]
...
box.execute("SELECT total(i) FROM t;")
---
- metadata:
  - name: total(i)
    type: number
  rows:
  - [1.844674407371e+19]
...
box.execute("SELECT min(i) FROM t;")
---
- metadata:
  - name: min(i)
    type: scalar
  rows:
  - [-1]
...
box.execute("SELECT max(i) FROM t;")
---
- metadata:
  - name: max(i)
    type: scalar
  rows:
  - [18446744073709551613]
...
box.execute("SELECT count(i) FROM t;")
---
- metadata:
  - name: count(i)
    type: integer
  rows:
  - [3]
...
box.execute("SELECT group_concat(i) FROM t;")
---
- metadata:
  - name: group_concat(i)
    type: string
  rows:
  - ['1,-1,18446744073709551613']
...
box.execute("DELETE FROM t WHERE i < 18446744073709551613;")
---
- row_count: 2
...
box.execute("SELECT lower(i) FROM t;")
---
- metadata:
  - name: lower(i)
    type: string
  rows:
  - ['18446744073709551613']
...
box.execute("SELECT upper(i) FROM t;")
---
- metadata:
  - name: upper(i)
    type: string
  rows:
  - ['18446744073709551613']
...
box.execute("SELECT abs(i) FROM t;")
---
- metadata:
  - name: abs(i)
    type: number
  rows:
  - [18446744073709551613]
...
box.execute("SELECT typeof(i) FROM t;")
---
- metadata:
  - name: typeof(i)
    type: string
  rows:
  - ['integer']
...
box.execute("SELECT quote(i) FROM t;")
---
- metadata:
  - name: quote(i)
    type: string
  rows:
  - [18446744073709551613]
...
box.execute("SELECT LEAST(-1, i) FROM t;")
---
- metadata:
  - name: LEAST(-1, i)
    type: scalar
  rows:
  - [-1]
...
box.execute("SELECT quote(i) FROM t;")
---
- metadata:
  - name: quote(i)
    type: string
  rows:
  - [18446744073709551613]
...
box.execute("CREATE INDEX i ON t(i);")
---
- row_count: 1
...
box.execute("SELECT i FROM t WHERE i = 18446744073709551613;")
---
- metadata:
  - name: I
    type: integer
  rows:
  - [18446744073709551613]
...
box.execute("SELECT i FROM t WHERE i >= 18446744073709551613 ORDER BY i;")
---
- metadata:
  - name: I
    type: integer
  rows:
  - [18446744073709551613]
...
box.execute("UPDATE t SET i = 18446744073709551615 WHERE i = 18446744073709551613;")
---
- row_count: 1
...
box.execute("SELECT i FROM t;")
---
- metadata:
  - name: I
    type: integer
  rows:
  - [18446744073709551615]
...
-- Test constraints functionality.
--
box.execute("CREATE TABLE parent (id INT PRIMARY KEY, a INT UNIQUE);")
---
- row_count: 1
...
box.execute("INSERT INTO parent VALUES (1, 18446744073709551613);")
---
- row_count: 1
...
box.space.T:truncate()
---
...
box.execute("ALTER TABLE t ADD CONSTRAINT fk1 FOREIGN KEY (i) REFERENCES parent (a);")
---
- row_count: 1
...
box.execute("INSERT INTO t VALUES (1, 18446744073709551615);")
---
- null
- 'Failed to execute SQL statement: FOREIGN KEY constraint failed'
...
box.execute("INSERT INTO parent VALUES (2, 18446744073709551615);")
---
- row_count: 1
...
box.execute("INSERT INTO t VALUES (1, 18446744073709551615);")
---
- row_count: 1
...
box.execute("ALTER TABLE t DROP CONSTRAINT fk1;")
---
- row_count: 1
...
box.space.PARENT:drop()
---
...
box.space.T:drop()
---
...
box.execute("CREATE TABLE t1 (id INT PRIMARY KEY, a INT CHECK (a > 18446744073709551612));")
---
- row_count: 1
...
box.execute("INSERT INTO t1 VALUES (1, 18446744073709551611);")
---
- null
- 'Check constraint failed ''ck_unnamed_T1_1'': a > 18446744073709551612'
...
box.execute("INSERT INTO t1 VALUES (1, -1);")
---
- null
- 'Check constraint failed ''ck_unnamed_T1_1'': a > 18446744073709551612'
...
box.space.T1:drop()
---
...
box.execute("CREATE TABLE t1 (id INT PRIMARY KEY, a INT DEFAULT 18446744073709551615);")
---
- row_count: 1
...
box.execute("INSERT INTO t1 (id) VALUES (1);")
---
- row_count: 1
...
box.space.T1:select()
---
- - [1, 18446744073709551615]
...
box.space.T1:drop()
---
...
-- Test that autoincrement accepts only max 2^63 - 1 .
--
box.execute("CREATE TABLE t1 (id INT PRIMARY KEY AUTOINCREMENT);")
---
- row_count: 1
...
box.execute("INSERT INTO t1 VALUES (18446744073709551615);")
---
- row_count: 1
...
box.execute("INSERT INTO t1 VALUES (NULL);")
---
- autoincrement_ids:
  - 1
  row_count: 1
...
box.space.T1:drop()
---
...
-- Test CAST facilities.
--
box.execute("SELECT CAST(18446744073709551615 AS NUMBER);")
---
- metadata:
  - name: CAST(18446744073709551615 AS NUMBER)
    type: number
  rows:
  - [18446744073709551615]
...
box.execute("SELECT CAST(18446744073709551615 AS TEXT);")
---
- metadata:
  - name: CAST(18446744073709551615 AS TEXT)
    type: string
  rows:
  - ['18446744073709551615']
...
box.execute("SELECT CAST(18446744073709551615 AS SCALAR);")
---
- metadata:
  - name: CAST(18446744073709551615 AS SCALAR)
    type: scalar
  rows:
  - [18446744073709551615]
...
box.execute("SELECT CAST(18446744073709551615 AS BOOLEAN);")
---
- metadata:
  - name: CAST(18446744073709551615 AS BOOLEAN)
    type: boolean
  rows:
  - [true]
...
box.execute("SELECT CAST('18446744073709551615' AS INTEGER);")
---
- metadata:
  - name: CAST('18446744073709551615' AS INTEGER)
    type: integer
  rows:
  - [18446744073709551615]
...
-- gh-4015: introduce unsigned type in SQL.
--
box.execute("CREATE TABLE t1 (id UNSIGNED PRIMARY KEY);")
---
- row_count: 1
...
box.execute("INSERT INTO t1 VALUES (0), (1), (2);")
---
- row_count: 3
...
box.execute("INSERT INTO t1 VALUES (-3);")
---
- null
- 'Type mismatch: can not convert -3 to unsigned'
...
box.execute("SELECT id FROM t1;")
---
- metadata:
  - name: ID
    type: unsigned
  rows:
  - [0]
  - [1]
  - [2]
...
box.execute("SELECT CAST(123 AS UNSIGNED);")
---
- metadata:
  - name: CAST(123 AS UNSIGNED)
    type: unsigned
  rows:
  - [123]
...
box.execute("SELECT CAST(-123 AS UNSIGNED);")
---
- null
- 'Type mismatch: can not convert -123 to unsigned'
...
box.execute("SELECT CAST(1.5 AS UNSIGNED);")
---
- metadata:
  - name: CAST(1.5 AS UNSIGNED)
    type: unsigned
  rows:
  - [1]
...
box.execute("SELECT CAST(-1.5 AS UNSIGNED);")
---
- metadata:
  - name: CAST(-1.5 AS UNSIGNED)
    type: unsigned
  rows:
  - [-1]
...
box.execute("SELECT CAST(true AS UNSIGNED);")
---
- metadata:
  - name: CAST(true AS UNSIGNED)
    type: unsigned
  rows:
  - [1]
...
box.execute("SELECT CAST('123' AS UNSIGNED);")
---
- metadata:
  - name: CAST('123' AS UNSIGNED)
    type: unsigned
  rows:
  - [123]
...
box.execute("SELECT CAST('-123' AS UNSIGNED);")
---
- null
- 'Type mismatch: can not convert -123 to unsigned'
...
box.space.T1:drop()
---
...
-- Check that STRING is a valid alias to TEXT type.
--
box.execute("CREATE TABLE t (id STRING PRIMARY KEY);")
---
- row_count: 1
...
box.space.T:format()[1].type
---
- string
...
box.space.T:drop()
---
...
-- Make sure that CASE-THEN statement return type is SCALAR in
-- case two THEN clauses feature different types.
--
box.execute("SELECT CASE 1 WHEN 1 THEN x'0000000000' WHEN 2 THEN 'str' END")
---
- metadata:
  - name: CASE 1 WHEN 1 THEN x'0000000000' WHEN 2 THEN 'str' END
    type: scalar
  rows:
  - ["\0\0\0\0\0"]
...
box.execute("SELECT CASE 1 WHEN 1 THEN 666 WHEN 2 THEN 123 END")
---
- metadata:
  - name: CASE 1 WHEN 1 THEN 666 WHEN 2 THEN 123 END
    type: integer
  rows:
  - [666]
...
box.execute("SELECT CASE 1 WHEN 1 THEN 666 WHEN 2 THEN 123 ELSE 321 END")
---
- metadata:
  - name: CASE 1 WHEN 1 THEN 666 WHEN 2 THEN 123 ELSE 321 END
    type: integer
  rows:
  - [666]
...
box.execute("SELECT CASE 1 WHEN 1 THEN 666 WHEN 2 THEN 123 ELSE 'asd' END")
---
- metadata:
  - name: CASE 1 WHEN 1 THEN 666 WHEN 2 THEN 123 ELSE 'asd' END
    type: scalar
  rows:
  - [666]
...
box.execute("SELECT CASE 'a' WHEN 'a' THEN 1 WHEN 'b' THEN 2 WHEN 'c' THEN 3 WHEN 'd' THEN 4 WHEN 'e' THEN 5 WHEN 'f' THEN 6 END;")
---
- metadata:
  - name: CASE 'a' WHEN 'a' THEN 1 WHEN 'b' THEN 2 WHEN 'c' THEN 3 WHEN 'd' THEN 4
      WHEN 'e' THEN 5 WHEN 'f' THEN 6 END
    type: integer
  rows:
  - [1]
...
box.execute("SELECT CASE 'a' WHEN 'a' THEN 1 WHEN 'b' THEN 2 WHEN 'c' THEN 3 WHEN 'd' THEN 4 WHEN 'e' THEN 5 WHEN 'f' THEN 'asd' END;")
---
- metadata:
  - name: CASE 'a' WHEN 'a' THEN 1 WHEN 'b' THEN 2 WHEN 'c' THEN 3 WHEN 'd' THEN 4
      WHEN 'e' THEN 5 WHEN 'f' THEN 'asd' END
    type: scalar
  rows:
  - [1]
...
box.execute("SELECT CASE 'a' WHEN 'a' THEN 1 WHEN 'b' THEN 2 WHEN 'c' THEN 3 WHEN 'd' THEN 4 WHEN 'e' THEN 5 WHEN 'f' THEN 6 ELSE 'asd' END;")
---
- metadata:
  - name: CASE 'a' WHEN 'a' THEN 1 WHEN 'b' THEN 2 WHEN 'c' THEN 3 WHEN 'd' THEN 4
      WHEN 'e' THEN 5 WHEN 'f' THEN 6 ELSE 'asd' END
    type: scalar
  rows:
  - [1]
...
box.execute("SELECT CASE 'a' WHEN 'a' THEN 1 WHEN 'b' THEN 2 WHEN 'c' THEN 3 WHEN 'd' THEN 4 WHEN 'e' THEN 5 WHEN 'f' THEN 6 ELSE 7 END;")
---
- metadata:
  - name: CASE 'a' WHEN 'a' THEN 1 WHEN 'b' THEN 2 WHEN 'c' THEN 3 WHEN 'd' THEN 4
      WHEN 'e' THEN 5 WHEN 'f' THEN 6 ELSE 7 END
    type: integer
  rows:
  - [1]
...
-- Test basic capabilities of VARBINARY type.
--
box.execute("CREATE TABLE t (id INT PRIMARY KEY, v VARBINARY);")
---
- row_count: 1
...
box.execute("INSERT INTO t VALUES(1, 1);")
---
- null
- 'Type mismatch: can not convert 1 to varbinary'
...
box.execute("INSERT INTO t VALUES(1, 1.123);")
---
- null
- 'Type mismatch: can not convert 1.123 to varbinary'
...
box.execute("INSERT INTO t VALUES(1, true);")
---
- null
- 'Type mismatch: can not convert TRUE to varbinary'
...
box.execute("INSERT INTO t VALUES(1, 'asd');")
---
- null
- 'Type mismatch: can not convert asd to varbinary'
...
box.execute("INSERT INTO t VALUES(1, x'616263');")
---
- row_count: 1
...
box.execute("SELECT * FROM t WHERE v = 1")
---
- null
- 'Type mismatch: can not convert unsigned to varbinary'
...
box.execute("SELECT * FROM t WHERE v = 1.123")
---
- null
- 'Type mismatch: can not convert real to varbinary'
...
box.execute("SELECT * FROM t WHERE v = 'str'")
---
- null
- 'Type mismatch: can not convert text to varbinary'
...
box.execute("SELECT * FROM t WHERE v = x'616263'")
---
- metadata:
  - name: ID
    type: integer
  - name: V
    type: varbinary
  rows:
  - [1, 'abc']
...
box.execute("SELECT sum(v) FROM t;")
---
- null
- 'Type mismatch: can not convert varbinary to number'
...
box.execute("SELECT avg(v) FROM t;")
---
- null
- 'Type mismatch: can not convert varbinary to number'
...
box.execute("SELECT total(v) FROM t;")
---
- null
- 'Type mismatch: can not convert varbinary to number'
...
box.execute("SELECT min(v) FROM t;")
---
- metadata:
  - name: min(v)
    type: scalar
  rows:
  - ['abc']
...
box.execute("SELECT max(v) FROM t;")
---
- metadata:
  - name: max(v)
    type: scalar
  rows:
  - ['abc']
...
box.execute("SELECT count(v) FROM t;")
---
- metadata:
  - name: count(v)
    type: integer
  rows:
  - [1]
...
box.execute("SELECT group_concat(v) FROM t;")
---
- metadata:
  - name: group_concat(v)
    type: string
  rows:
  - ['abc']
...
box.execute("SELECT lower(v) FROM t;")
---
- null
- 'Inconsistent types: expected text got varbinary'
...
box.execute("SELECT upper(v) FROM t;")
---
- null
- 'Inconsistent types: expected text got varbinary'
...
box.execute("SELECT abs(v) FROM t;")
---
- null
- 'Inconsistent types: expected number got varbinary'
...
box.execute("SELECT typeof(v) FROM t;")
---
- metadata:
  - name: typeof(v)
    type: string
  rows:
  - ['varbinary']
...
box.execute("SELECT quote(v) FROM t;")
---
- metadata:
  - name: quote(v)
    type: string
  rows:
  - ['X''616263''']
...
box.execute("SELECT LEAST(v, x'') FROM t;")
---
- metadata:
  - name: LEAST(v, x'')
    type: scalar
  rows:
  - ['']
...
box.execute("CREATE INDEX iv ON t(v);")
---
- row_count: 1
...
box.execute("SELECT v FROM t WHERE v = x'616263';")
---
- metadata:
  - name: V
    type: varbinary
  rows:
  - ['abc']
...
box.execute("SELECT v FROM t ORDER BY v;")
---
- metadata:
  - name: V
    type: varbinary
  rows:
  - ['abc']
...
box.execute("UPDATE t SET v = x'636261' WHERE v = x'616263';")
---
- row_count: 1
...
box.execute("SELECT v FROM t;")
---
- metadata:
  - name: V
    type: varbinary
  rows:
  - ['cba']
...
box.execute("CREATE TABLE parent (id INT PRIMARY KEY, a VARBINARY UNIQUE);")
---
- row_count: 1
...
box.space.T:truncate()
---
...
box.execute("ALTER TABLE t ADD CONSTRAINT fk1 FOREIGN KEY (v) REFERENCES parent (a);")
---
- row_count: 1
...
box.execute("INSERT INTO t VALUES (1, x'616263');")
---
- null
- 'Failed to execute SQL statement: FOREIGN KEY constraint failed'
...
box.execute("INSERT INTO parent VALUES (1, x'616263');")
---
- row_count: 1
...
box.execute("INSERT INTO t VALUES (1, x'616263');")
---
- row_count: 1
...
box.execute("ALTER TABLE t DROP CONSTRAINT fk1;")
---
- row_count: 1
...
box.space.PARENT:drop()
---
...
box.space.T:drop()
---
...
box.execute("CREATE TABLE t1 (id INT PRIMARY KEY, a VARBINARY CHECK (a = x'616263'));")
---
- row_count: 1
...
box.execute("INSERT INTO t1 VALUES (1, x'006162');")
---
- null
- 'Check constraint failed ''ck_unnamed_T1_1'': a = x''616263'''
...
box.execute("INSERT INTO t1 VALUES (1, x'616263');")
---
- row_count: 1
...
box.space.T1:drop()
---
...
box.execute("CREATE TABLE t1 (id INT PRIMARY KEY, a VARBINARY DEFAULT x'616263');")
---
- row_count: 1
...
box.execute("INSERT INTO t1 (id) VALUES (1);")
---
- row_count: 1
...
box.space.T1:select()
---
- - [1, 'abc']
...
box.space.T1:drop()
---
...
box.execute("SELECT CAST(1 AS VARBINARY);")
---
- null
- 'Type mismatch: can not convert 1 to varbinary'
...
box.execute("SELECT CAST(1.123 AS VARBINARY);")
---
- null
- 'Type mismatch: can not convert 1.123 to varbinary'
...
box.execute("SELECT CAST(true AS VARBINARY);")
---
- null
- 'Type mismatch: can not convert TRUE to varbinary'
...
box.execute("SELECT CAST('asd' AS VARBINARY);")
---
- metadata:
  - name: CAST('asd' AS VARBINARY)
    type: varbinary
  rows:
  - ['asd']
...
box.execute("SELECT CAST(x'' AS VARBINARY);")
---
- metadata:
  - name: CAST(x'' AS VARBINARY)
    type: varbinary
  rows:
  - ['']
...
-- gh-4148: make sure that typeof() returns origin type of column
-- even if value is null.
--
box.execute("CREATE TABLE t (id INT PRIMARY KEY, a INT, s SCALAR);")
---
- row_count: 1
...
box.execute("INSERT INTO t VALUES (1, 1, 1), (2, NULL, NULL);")
---
- row_count: 2
...
box.execute("SELECT typeof(a), typeof(s) FROM t;")
---
- metadata:
  - name: typeof(a)
    type: string
  - name: typeof(s)
    type: string
  rows:
  - ['integer', 'integer']
  - ['integer', 'boolean']
...
box.execute('CREATE TABLE t1 (id INTEGER PRIMARY KEY, a INTEGER, b INTEGER)')
---
- row_count: 1
...
box.execute('INSERT INTO t1 VALUES (1, NULL, NULL);')
---
- row_count: 1
...
box.execute('SELECT typeof(a & b) FROM t1;')
---
- metadata:
  - name: typeof(a & b)
    type: string
  rows:
  - ['integer']
...
box.execute('SELECT typeof(a), typeof(b), typeof(a & b) FROM t1')
---
- metadata:
  - name: typeof(a)
    type: string
  - name: typeof(b)
    type: string
  - name: typeof(a & b)
    type: string
  rows:
  - ['integer', 'integer', 'integer']
...
box.execute("SELECT typeof(CAST(0 AS UNSIGNED));")
---
- metadata:
  - name: typeof(CAST(0 AS UNSIGNED))
    type: string
  rows:
  - ['unsigned']
...
box.space.T:drop()
---
...
box.space.T1:drop()
---
...
--
-- gh-4189: make sure that update doesn't throw an error if format
-- of table features map/array field types.
--
format = {}
---
...
format[1] = {type = 'integer', name = 'I'}
---
...
format[2] = {type = 'boolean', name = 'B'}
---
...
format[3] = {type = 'array', name = 'F1'}
---
...
format[4] = {type = 'map', name = 'F2'}
---
...
format[5] = {type = 'any', name = 'F3'}
---
...
s = box.schema.space.create('T', {format = format})
---
...
ii = s:create_index('ii')
---
...
s:insert({1, true, {1, 2}, {a = 3}, 'asd'})
---
- [1, true, [1, 2], {'a': 3}, 'asd']
...
box.execute('UPDATE t SET b = false WHERE i = 1;')
---
- row_count: 1
...
s:select()
---
- - [1, false, [1, 2], {'a': 3}, 'asd']
...
s:drop()
---
...
--
-- Make sure that the array/map conversion to scalar error is
-- displayed correctly.
--
box.execute('CREATE TABLE t1(i INT PRIMARY KEY AUTOINCREMENT, a SCALAR);')
---
- row_count: 1
...
format = {}
---
...
format[1] = {type = 'integer', name = 'I'}
---
...
format[2] = {type = 'array', name = 'A'}
---
...
s = box.schema.space.create('T2', {format=format})
---
...
i = s:create_index('ii')
---
...
s:insert({1, {1,2,3}})
---
- [1, [1, 2, 3]]
...
box.execute('INSERT INTO t1(a) SELECT a FROM t2;')
---
- null
- 'Type mismatch: can not convert [1, 2, 3] to scalar'
...
s:replace({1, {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30}})
---
- [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
    22, 23, 24, 25, 26, 27, 28, 29, 30]]
...
box.execute('INSERT INTO t1(a) SELECT a FROM t2;')
---
- null
- 'Type mismatch: can not convert [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
  15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30] to scalar'
...
--
-- Make sure that the error will be displayed correctly even if
-- the value is too long.
--
long_array = {}
---
...
for i = 1,120 do long_array[i] = i end
---
...
s:replace({1, long_array})
---
- [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
    22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
    42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
    62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
    82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
    102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
    118, 119, 120]]
...
box.execute('INSERT INTO t1(a) SELECT a FROM t2;')
---
- null
- 'Type mismatch: can not convert [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
  15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
  35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
  55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
  75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
  95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
  112, 113, 114, 115, 116, 117, 11'
...
s:drop()
---
...
format[2].type = 'map'
---
...
s = box.schema.space.create('T2', {format=format})
---
...
i = s:create_index('ii')
---
...
s:insert({1, {b = 1}})
---
- [1, {'b': 1}]
...
box.execute('INSERT INTO t1(a) SELECT a FROM t2;')
---
- null
- 'Type mismatch: can not convert {"b": 1} to scalar'
...
s:drop()
---
...
box.execute('DROP TABLE t1;')
---
- row_count: 1
...
-- gh-3812: Make sure DOUBLE type works correctly.
box.execute("SELECT 1.0;")
---
- metadata:
  - name: '1.0'
    type: double
  rows:
  - [1]
...
box.execute("SELECT .01;")
---
- metadata:
  - name: '.01'
    type: double
  rows:
  - [0.01]
...
box.execute("SELECT CAST(1 AS DOUBLE);")
---
- metadata:
  - name: CAST(1 AS DOUBLE)
    type: double
  rows:
  - [1]
...
box.execute("SELECT CAST(1.123 AS DOUBLE);")
---
- metadata:
  - name: CAST(1.123 AS DOUBLE)
    type: double
  rows:
  - [1.123]
...
box.execute("SELECT CAST(true AS DOUBLE);")
---
- null
- 'Type mismatch: can not convert TRUE to double'
...
box.execute("SELECT CAST('asd' AS DOUBLE);")
---
- null
- 'Type mismatch: can not convert asd to double'
...
box.execute("SELECT CAST('1' AS DOUBLE);")
---
- metadata:
  - name: CAST('1' AS DOUBLE)
    type: double
  rows:
  - [1]
...
box.execute("SELECT CAST('1.123' AS DOUBLE);")
---
- metadata:
  - name: CAST('1.123' AS DOUBLE)
    type: double
  rows:
  - [1.123]
...
box.execute("SELECT CAST(x'' AS DOUBLE);")
---
- null
- 'Type mismatch: can not convert varbinary to double'
...
box.execute("SELECT CAST(x'35' AS DOUBLE);")
---
- null
- 'Type mismatch: can not convert varbinary to double'
...
box.execute("SELECT CAST(CAST(x'35' AS STRING) AS DOUBLE);")
---
- metadata:
  - name: CAST(CAST(x'35' AS STRING) AS DOUBLE)
    type: double
  rows:
  - [5]
...
box.execute('CREATE TABLE t (i INT PRIMARY KEY AUTOINCREMENT, d DOUBLE);')
---
- row_count: 1
...
box.execute('INSERT INTO t(d) VALUES (10), (-2.0), (3.3), (18000000000000000000);')
---
- autoincrement_ids:
  - 1
  - 2
  - 3
  - 4
  row_count: 4
...
box.execute('SELECT * FROM t;')
---
- metadata:
  - name: I
    type: integer
  - name: D
    type: double
  rows:
  - [1, 10]
  - [2, -2]
  - [3, 3.3]
  - [4, 18000000000000000000]
...
box.execute('SELECT d / 100 FROM t;')
---
- metadata:
  - name: d / 100
    type: double
  rows:
  - [0.1]
  - [-0.02]
  - [0.033]
  - [180000000000000000]
...
box.execute('SELECT * from t WHERE d < 15;')
---
- metadata:
  - name: I
    type: integer
  - name: D
    type: double
  rows:
  - [1, 10]
  - [2, -2]
  - [3, 3.3]
...
box.execute('SELECT * from t WHERE d = 3.3;')
---
- metadata:
  - name: I
    type: integer
  - name: D
    type: double
  rows:
  - [3, 3.3]
...
box.execute("SELECT sum(d) FROM t;")
---
- metadata:
  - name: sum(d)
    type: number
  rows:
  - [18000000000000000000]
...
box.execute("SELECT avg(d) FROM t;")
---
- metadata:
  - name: avg(d)
    type: number
  rows:
  - [4500000000000000000]
...
box.execute("SELECT total(d) FROM t;")
---
- metadata:
  - name: total(d)
    type: number
  rows:
  - [18000000000000000000]
...
box.execute("SELECT min(d) FROM t;")
---
- metadata:
  - name: min(d)
    type: scalar
  rows:
  - [-2]
...
box.execute("SELECT max(d) FROM t;")
---
- metadata:
  - name: max(d)
    type: scalar
  rows:
  - [18000000000000000000]
...
box.execute("SELECT count(d) FROM t;")
---
- metadata:
  - name: count(d)
    type: integer
  rows:
  - [4]
...
box.execute("SELECT group_concat(d) FROM t;")
---
- metadata:
  - name: group_concat(d)
    type: string
  rows:
  - ['10.0,-2.0,3.3,1.8e+19']
...
box.execute("SELECT lower(d) FROM t;")
---
- metadata:
  - name: lower(d)
    type: string
  rows:
  - ['10.0']
  - ['-2.0']
  - ['3.3']
  - ['1.8e+19']
...
box.execute("SELECT upper(d) FROM t;")
---
- metadata:
  - name: upper(d)
    type: string
  rows:
  - ['10.0']
  - ['-2.0']
  - ['3.3']
  - ['1.8E+19']
...
box.execute("SELECT abs(d) FROM t;")
---
- metadata:
  - name: abs(d)
    type: number
  rows:
  - [10]
  - [2]
  - [3.3]
  - [18000000000000000000]
...
box.execute("SELECT typeof(d) FROM t;")
---
- metadata:
  - name: typeof(d)
    type: string
  rows:
  - ['double']
  - ['double']
  - ['double']
  - ['double']
...
box.execute("SELECT quote(d) FROM t;")
---
- metadata:
  - name: quote(d)
    type: string
  rows:
  - ['10.0']
  - ['-2.0']
  - ['3.3']
  - ['1.8e+19']
...
box.execute("SELECT LEAST(d, 0) FROM t;")
---
- metadata:
  - name: LEAST(d, 0)
    type: scalar
  rows:
  - [0]
  - [-2]
  - [0]
  - [0]
...
box.execute("CREATE INDEX dd ON t(d);")
---
- row_count: 1
...
box.execute("SELECT d FROM t WHERE d < 0;")
---
- metadata:
  - name: D
    type: double
  rows:
  - [-2]
...
box.execute("SELECT d FROM t ORDER BY d;")
---
- metadata:
  - name: D
    type: double
  rows:
  - [-2]
  - [3.3]
  - [10]
  - [18000000000000000000]
...
box.execute("UPDATE t SET d = 1 WHERE d = 10;")
---
- row_count: 1
...
box.execute("SELECT d FROM t;")
---
- metadata:
  - name: D
    type: double
  rows:
  - [1]
  - [-2]
  - [3.3]
  - [18000000000000000000]
...
box.execute("DROP TABLE t;")
---
- row_count: 1
...
box.execute("CREATE TABLE t1 (d DOUBLE PRIMARY KEY);")
---
- row_count: 1
...
box.execute("INSERT INTO t1 VALUES (1), (2.2), (3.5);")
---
- row_count: 3
...
box.execute("INSERT INTO t1 VALUES (1);")
---
- null
- Duplicate key exists in unique index 'pk_unnamed_T1_1' in space 'T1'
...
box.execute("CREATE TABLE t2 (i INT PRIMARY KEY, d DOUBLE REFERENCES t1);")
---
- row_count: 1
...
box.execute("INSERT INTO t2 VALUES (1,1), (2,2.2), (100, 3.5), (4, 1);")
---
- row_count: 4
...
box.execute("INSERT INTO t2 VALUES (5,10);")
---
- null
- 'Failed to execute SQL statement: FOREIGN KEY constraint failed'
...
box.execute("DROP TABLE t2;")
---
- row_count: 1
...
box.execute("DROP TABLE t1;")
---
- row_count: 1
...
box.execute("CREATE TABLE t3 (i INT PRIMARY KEY, d DOUBLE CHECK (d < 10));")
---
- row_count: 1
...
box.execute("INSERT INTO t3 VALUES (1, 1);")
---
- row_count: 1
...
box.execute("INSERT INTO t3 VALUES (2, 9.999999);")
---
- row_count: 1
...
box.execute("INSERT INTO t3 VALUES (3, 10.0000001);")
---
- null
- 'Check constraint failed ''ck_unnamed_T3_1'': d < 10'
...
box.execute("SELECT * FROM t3;")
---
- metadata:
  - name: I
    type: integer
  - name: D
    type: double
  rows:
  - [1, 1]
  - [2, 9.999999]
...
box.execute("DROP TABLE t3;")
---
- row_count: 1
...
box.execute("CREATE TABLE t4 (i INT PRIMARY KEY, d DOUBLE DEFAULT 1.2345);")
---
- row_count: 1
...
box.execute("INSERT INTO t4(i) VALUES (1);")
---
- row_count: 1
...
box.execute("SELECT * FROM t4;")
---
- metadata:
  - name: I
    type: integer
  - name: D
    type: double
  rows:
  - [1, 1.2345]
...
box.execute("DROP TABLE t4;")
---
- row_count: 1
...
-- Make sure the typeof() function works correctly with DOUBLE.
box.execute("SELECT 1.0, typeof(1.0);")
---
- metadata:
  - name: '1.0'
    type: double
  - name: typeof(1.0)
    type: string
  rows:
  - [1, 'double']
...
box.execute("SELECT CAST(2 AS DOUBLE), typeof(CAST(2 AS DOUBLE));")
---
- metadata:
  - name: CAST(2 AS DOUBLE)
    type: double
  - name: typeof(CAST(2 AS DOUBLE))
    type: string
  rows:
  - [2, 'double']
...
box.execute("SELECT 3e3, typeof(3e3);")
---
- metadata:
  - name: '3e3'
    type: double
  - name: typeof(3e3)
    type: string
  rows:
  - [3000, 'double']
...
box.execute("CREATE TABLE t5 (d DOUBLE PRIMARY KEY);")
---
- row_count: 1
...
box.execute("INSERT INTO t5 VALUES (4), (5.5), (6e6);")
---
- row_count: 3
...
box.execute("SELECT d, TYPEOF(d) FROM t5;")
---
- metadata:
  - name: D
    type: double
  - name: TYPEOF(d)
    type: string
  rows:
  - [4, 'double']
  - [5.5, 'double']
  - [6000000, 'double']
...
-- gh-4728: make sure that given query doesn't result in
-- assertion fault.
--
s = box.schema.space.create('s')
---
...
_ = s:create_index('pk')
---
...
s:format({ \
    [1] = {name = 'id', type = 'unsigned'}, \
    [2] = {name = 'v', type = 'string', is_nullable = true}, \
})
---
...
box.execute([[SELECT * FROM "s" WHERE "id" = ?;]])
---
- metadata:
  - name: id
    type: unsigned
  - name: v
    type: string
  rows: []
...
s:drop()
---
...
